// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto
// Original file comments:
//
// Copyright 2017 The jetcd authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Etcdserverpb {
  public static partial class KV
  {
    static readonly string __ServiceName = "etcdserverpb.KV";

    static readonly grpc::Marshaller<global::Etcdserverpb.RangeRequest> __Marshaller_RangeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.RangeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.RangeResponse> __Marshaller_RangeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.RangeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.PutRequest> __Marshaller_PutRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.PutRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.PutResponse> __Marshaller_PutResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.PutResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.DeleteRangeRequest> __Marshaller_DeleteRangeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.DeleteRangeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.DeleteRangeResponse> __Marshaller_DeleteRangeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.DeleteRangeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.TxnRequest> __Marshaller_TxnRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.TxnRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.TxnResponse> __Marshaller_TxnResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.TxnResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.CompactionRequest> __Marshaller_CompactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.CompactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.CompactionResponse> __Marshaller_CompactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.CompactionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Etcdserverpb.RangeRequest, global::Etcdserverpb.RangeResponse> __Method_Range = new grpc::Method<global::Etcdserverpb.RangeRequest, global::Etcdserverpb.RangeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Range",
        __Marshaller_RangeRequest,
        __Marshaller_RangeResponse);

    static readonly grpc::Method<global::Etcdserverpb.PutRequest, global::Etcdserverpb.PutResponse> __Method_Put = new grpc::Method<global::Etcdserverpb.PutRequest, global::Etcdserverpb.PutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Put",
        __Marshaller_PutRequest,
        __Marshaller_PutResponse);

    static readonly grpc::Method<global::Etcdserverpb.DeleteRangeRequest, global::Etcdserverpb.DeleteRangeResponse> __Method_DeleteRange = new grpc::Method<global::Etcdserverpb.DeleteRangeRequest, global::Etcdserverpb.DeleteRangeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRange",
        __Marshaller_DeleteRangeRequest,
        __Marshaller_DeleteRangeResponse);

    static readonly grpc::Method<global::Etcdserverpb.TxnRequest, global::Etcdserverpb.TxnResponse> __Method_Txn = new grpc::Method<global::Etcdserverpb.TxnRequest, global::Etcdserverpb.TxnResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Txn",
        __Marshaller_TxnRequest,
        __Marshaller_TxnResponse);

    static readonly grpc::Method<global::Etcdserverpb.CompactionRequest, global::Etcdserverpb.CompactionResponse> __Method_Compact = new grpc::Method<global::Etcdserverpb.CompactionRequest, global::Etcdserverpb.CompactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Compact",
        __Marshaller_CompactionRequest,
        __Marshaller_CompactionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of KV</summary>
    public abstract partial class KVBase
    {
      /// <summary>
      /// Range gets the keys in the range from the key-value store.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.RangeResponse> Range(global::Etcdserverpb.RangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Put puts the given key into the key-value store.
      /// A put request increments the revision of the key-value store
      /// and generates one event in the event history.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.PutResponse> Put(global::Etcdserverpb.PutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteRange deletes the given range from the key-value store.
      /// A delete request increments the revision of the key-value store
      /// and generates a delete event in the event history for every deleted key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.DeleteRangeResponse> DeleteRange(global::Etcdserverpb.DeleteRangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Txn processes multiple requests in a single transaction.
      /// A txn request increments the revision of the key-value store
      /// and generates events with the same revision for every completed request.
      /// It is not allowed to modify the same key several times within one txn.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.TxnResponse> Txn(global::Etcdserverpb.TxnRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Compact compacts the event history in the etcd key-value store. The key-value
      /// store should be periodically compacted or the event history will continue to grow
      /// indefinitely.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.CompactionResponse> Compact(global::Etcdserverpb.CompactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for KV</summary>
    public partial class KVClient : grpc::ClientBase<KVClient>
    {
      /// <summary>Creates a new client for KV</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public KVClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for KV that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public KVClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected KVClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected KVClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Range gets the keys in the range from the key-value store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.RangeResponse Range(global::Etcdserverpb.RangeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Range(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Range gets the keys in the range from the key-value store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.RangeResponse Range(global::Etcdserverpb.RangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Range, null, options, request);
      }
      /// <summary>
      /// Range gets the keys in the range from the key-value store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.RangeResponse> RangeAsync(global::Etcdserverpb.RangeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Range gets the keys in the range from the key-value store.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.RangeResponse> RangeAsync(global::Etcdserverpb.RangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Range, null, options, request);
      }
      /// <summary>
      /// Put puts the given key into the key-value store.
      /// A put request increments the revision of the key-value store
      /// and generates one event in the event history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.PutResponse Put(global::Etcdserverpb.PutRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Put(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Put puts the given key into the key-value store.
      /// A put request increments the revision of the key-value store
      /// and generates one event in the event history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.PutResponse Put(global::Etcdserverpb.PutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Put, null, options, request);
      }
      /// <summary>
      /// Put puts the given key into the key-value store.
      /// A put request increments the revision of the key-value store
      /// and generates one event in the event history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.PutResponse> PutAsync(global::Etcdserverpb.PutRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Put puts the given key into the key-value store.
      /// A put request increments the revision of the key-value store
      /// and generates one event in the event history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.PutResponse> PutAsync(global::Etcdserverpb.PutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Put, null, options, request);
      }
      /// <summary>
      /// DeleteRange deletes the given range from the key-value store.
      /// A delete request increments the revision of the key-value store
      /// and generates a delete event in the event history for every deleted key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.DeleteRangeResponse DeleteRange(global::Etcdserverpb.DeleteRangeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteRange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteRange deletes the given range from the key-value store.
      /// A delete request increments the revision of the key-value store
      /// and generates a delete event in the event history for every deleted key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.DeleteRangeResponse DeleteRange(global::Etcdserverpb.DeleteRangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRange, null, options, request);
      }
      /// <summary>
      /// DeleteRange deletes the given range from the key-value store.
      /// A delete request increments the revision of the key-value store
      /// and generates a delete event in the event history for every deleted key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.DeleteRangeResponse> DeleteRangeAsync(global::Etcdserverpb.DeleteRangeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteRangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteRange deletes the given range from the key-value store.
      /// A delete request increments the revision of the key-value store
      /// and generates a delete event in the event history for every deleted key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.DeleteRangeResponse> DeleteRangeAsync(global::Etcdserverpb.DeleteRangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRange, null, options, request);
      }
      /// <summary>
      /// Txn processes multiple requests in a single transaction.
      /// A txn request increments the revision of the key-value store
      /// and generates events with the same revision for every completed request.
      /// It is not allowed to modify the same key several times within one txn.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.TxnResponse Txn(global::Etcdserverpb.TxnRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Txn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Txn processes multiple requests in a single transaction.
      /// A txn request increments the revision of the key-value store
      /// and generates events with the same revision for every completed request.
      /// It is not allowed to modify the same key several times within one txn.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.TxnResponse Txn(global::Etcdserverpb.TxnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Txn, null, options, request);
      }
      /// <summary>
      /// Txn processes multiple requests in a single transaction.
      /// A txn request increments the revision of the key-value store
      /// and generates events with the same revision for every completed request.
      /// It is not allowed to modify the same key several times within one txn.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.TxnResponse> TxnAsync(global::Etcdserverpb.TxnRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TxnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Txn processes multiple requests in a single transaction.
      /// A txn request increments the revision of the key-value store
      /// and generates events with the same revision for every completed request.
      /// It is not allowed to modify the same key several times within one txn.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.TxnResponse> TxnAsync(global::Etcdserverpb.TxnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Txn, null, options, request);
      }
      /// <summary>
      /// Compact compacts the event history in the etcd key-value store. The key-value
      /// store should be periodically compacted or the event history will continue to grow
      /// indefinitely.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.CompactionResponse Compact(global::Etcdserverpb.CompactionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Compact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Compact compacts the event history in the etcd key-value store. The key-value
      /// store should be periodically compacted or the event history will continue to grow
      /// indefinitely.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.CompactionResponse Compact(global::Etcdserverpb.CompactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Compact, null, options, request);
      }
      /// <summary>
      /// Compact compacts the event history in the etcd key-value store. The key-value
      /// store should be periodically compacted or the event history will continue to grow
      /// indefinitely.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.CompactionResponse> CompactAsync(global::Etcdserverpb.CompactionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CompactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Compact compacts the event history in the etcd key-value store. The key-value
      /// store should be periodically compacted or the event history will continue to grow
      /// indefinitely.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.CompactionResponse> CompactAsync(global::Etcdserverpb.CompactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Compact, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override KVClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KVClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(KVBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Range, serviceImpl.Range)
          .AddMethod(__Method_Put, serviceImpl.Put)
          .AddMethod(__Method_DeleteRange, serviceImpl.DeleteRange)
          .AddMethod(__Method_Txn, serviceImpl.Txn)
          .AddMethod(__Method_Compact, serviceImpl.Compact).Build();
    }

  }
  public static partial class Watch
  {
    static readonly string __ServiceName = "etcdserverpb.Watch";

    static readonly grpc::Marshaller<global::Etcdserverpb.WatchRequest> __Marshaller_WatchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.WatchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.WatchResponse> __Marshaller_WatchResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.WatchResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Etcdserverpb.WatchRequest, global::Etcdserverpb.WatchResponse> __Method_Watch = new grpc::Method<global::Etcdserverpb.WatchRequest, global::Etcdserverpb.WatchResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Watch",
        __Marshaller_WatchRequest,
        __Marshaller_WatchResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Watch</summary>
    public abstract partial class WatchBase
    {
      /// <summary>
      /// Watch watches for events happening or that have happened. Both input and output
      /// are streams; the input stream is for creating and canceling watchers and the output
      /// stream sends events. One watch RPC can watch on multiple key ranges, streaming events
      /// for several watches at once. The entire event history can be watched starting from the
      /// last compaction revision.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Watch(grpc::IAsyncStreamReader<global::Etcdserverpb.WatchRequest> requestStream, grpc::IServerStreamWriter<global::Etcdserverpb.WatchResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Watch</summary>
    public partial class WatchClient : grpc::ClientBase<WatchClient>
    {
      /// <summary>Creates a new client for Watch</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WatchClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Watch that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WatchClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WatchClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WatchClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Watch watches for events happening or that have happened. Both input and output
      /// are streams; the input stream is for creating and canceling watchers and the output
      /// stream sends events. One watch RPC can watch on multiple key ranges, streaming events
      /// for several watches at once. The entire event history can be watched starting from the
      /// last compaction revision.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Etcdserverpb.WatchRequest, global::Etcdserverpb.WatchResponse> Watch(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Watch(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Watch watches for events happening or that have happened. Both input and output
      /// are streams; the input stream is for creating and canceling watchers and the output
      /// stream sends events. One watch RPC can watch on multiple key ranges, streaming events
      /// for several watches at once. The entire event history can be watched starting from the
      /// last compaction revision.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Etcdserverpb.WatchRequest, global::Etcdserverpb.WatchResponse> Watch(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Watch, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WatchClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WatchClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WatchBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Watch, serviceImpl.Watch).Build();
    }

  }
  public static partial class Lease
  {
    static readonly string __ServiceName = "etcdserverpb.Lease";

    static readonly grpc::Marshaller<global::Etcdserverpb.LeaseGrantRequest> __Marshaller_LeaseGrantRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.LeaseGrantRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.LeaseGrantResponse> __Marshaller_LeaseGrantResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.LeaseGrantResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.LeaseRevokeRequest> __Marshaller_LeaseRevokeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.LeaseRevokeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.LeaseRevokeResponse> __Marshaller_LeaseRevokeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.LeaseRevokeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.LeaseKeepAliveRequest> __Marshaller_LeaseKeepAliveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.LeaseKeepAliveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.LeaseKeepAliveResponse> __Marshaller_LeaseKeepAliveResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.LeaseKeepAliveResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.LeaseTimeToLiveRequest> __Marshaller_LeaseTimeToLiveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.LeaseTimeToLiveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.LeaseTimeToLiveResponse> __Marshaller_LeaseTimeToLiveResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.LeaseTimeToLiveResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Etcdserverpb.LeaseGrantRequest, global::Etcdserverpb.LeaseGrantResponse> __Method_LeaseGrant = new grpc::Method<global::Etcdserverpb.LeaseGrantRequest, global::Etcdserverpb.LeaseGrantResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LeaseGrant",
        __Marshaller_LeaseGrantRequest,
        __Marshaller_LeaseGrantResponse);

    static readonly grpc::Method<global::Etcdserverpb.LeaseRevokeRequest, global::Etcdserverpb.LeaseRevokeResponse> __Method_LeaseRevoke = new grpc::Method<global::Etcdserverpb.LeaseRevokeRequest, global::Etcdserverpb.LeaseRevokeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LeaseRevoke",
        __Marshaller_LeaseRevokeRequest,
        __Marshaller_LeaseRevokeResponse);

    static readonly grpc::Method<global::Etcdserverpb.LeaseKeepAliveRequest, global::Etcdserverpb.LeaseKeepAliveResponse> __Method_LeaseKeepAlive = new grpc::Method<global::Etcdserverpb.LeaseKeepAliveRequest, global::Etcdserverpb.LeaseKeepAliveResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "LeaseKeepAlive",
        __Marshaller_LeaseKeepAliveRequest,
        __Marshaller_LeaseKeepAliveResponse);

    static readonly grpc::Method<global::Etcdserverpb.LeaseTimeToLiveRequest, global::Etcdserverpb.LeaseTimeToLiveResponse> __Method_LeaseTimeToLive = new grpc::Method<global::Etcdserverpb.LeaseTimeToLiveRequest, global::Etcdserverpb.LeaseTimeToLiveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LeaseTimeToLive",
        __Marshaller_LeaseTimeToLiveRequest,
        __Marshaller_LeaseTimeToLiveResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of Lease</summary>
    public abstract partial class LeaseBase
    {
      /// <summary>
      /// LeaseGrant creates a lease which expires if the server does not receive a keepAlive
      /// within a given time to live period. All keys attached to the lease will be expired and
      /// deleted if the lease expires. Each expired key generates a delete event in the event history.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.LeaseGrantResponse> LeaseGrant(global::Etcdserverpb.LeaseGrantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.LeaseRevokeResponse> LeaseRevoke(global::Etcdserverpb.LeaseRevokeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// LeaseKeepAlive keeps the lease alive by streaming keep alive requests from the client
      /// to the server and streaming keep alive responses from the server to the client.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task LeaseKeepAlive(grpc::IAsyncStreamReader<global::Etcdserverpb.LeaseKeepAliveRequest> requestStream, grpc::IServerStreamWriter<global::Etcdserverpb.LeaseKeepAliveResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// LeaseTimeToLive retrieves lease information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.LeaseTimeToLiveResponse> LeaseTimeToLive(global::Etcdserverpb.LeaseTimeToLiveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Lease</summary>
    public partial class LeaseClient : grpc::ClientBase<LeaseClient>
    {
      /// <summary>Creates a new client for Lease</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LeaseClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Lease that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LeaseClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LeaseClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LeaseClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// LeaseGrant creates a lease which expires if the server does not receive a keepAlive
      /// within a given time to live period. All keys attached to the lease will be expired and
      /// deleted if the lease expires. Each expired key generates a delete event in the event history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.LeaseGrantResponse LeaseGrant(global::Etcdserverpb.LeaseGrantRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LeaseGrant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LeaseGrant creates a lease which expires if the server does not receive a keepAlive
      /// within a given time to live period. All keys attached to the lease will be expired and
      /// deleted if the lease expires. Each expired key generates a delete event in the event history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.LeaseGrantResponse LeaseGrant(global::Etcdserverpb.LeaseGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LeaseGrant, null, options, request);
      }
      /// <summary>
      /// LeaseGrant creates a lease which expires if the server does not receive a keepAlive
      /// within a given time to live period. All keys attached to the lease will be expired and
      /// deleted if the lease expires. Each expired key generates a delete event in the event history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.LeaseGrantResponse> LeaseGrantAsync(global::Etcdserverpb.LeaseGrantRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LeaseGrantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LeaseGrant creates a lease which expires if the server does not receive a keepAlive
      /// within a given time to live period. All keys attached to the lease will be expired and
      /// deleted if the lease expires. Each expired key generates a delete event in the event history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.LeaseGrantResponse> LeaseGrantAsync(global::Etcdserverpb.LeaseGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LeaseGrant, null, options, request);
      }
      /// <summary>
      /// LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.LeaseRevokeResponse LeaseRevoke(global::Etcdserverpb.LeaseRevokeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LeaseRevoke(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.LeaseRevokeResponse LeaseRevoke(global::Etcdserverpb.LeaseRevokeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LeaseRevoke, null, options, request);
      }
      /// <summary>
      /// LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.LeaseRevokeResponse> LeaseRevokeAsync(global::Etcdserverpb.LeaseRevokeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LeaseRevokeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.LeaseRevokeResponse> LeaseRevokeAsync(global::Etcdserverpb.LeaseRevokeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LeaseRevoke, null, options, request);
      }
      /// <summary>
      /// LeaseKeepAlive keeps the lease alive by streaming keep alive requests from the client
      /// to the server and streaming keep alive responses from the server to the client.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Etcdserverpb.LeaseKeepAliveRequest, global::Etcdserverpb.LeaseKeepAliveResponse> LeaseKeepAlive(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LeaseKeepAlive(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LeaseKeepAlive keeps the lease alive by streaming keep alive requests from the client
      /// to the server and streaming keep alive responses from the server to the client.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Etcdserverpb.LeaseKeepAliveRequest, global::Etcdserverpb.LeaseKeepAliveResponse> LeaseKeepAlive(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_LeaseKeepAlive, null, options);
      }
      /// <summary>
      /// LeaseTimeToLive retrieves lease information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.LeaseTimeToLiveResponse LeaseTimeToLive(global::Etcdserverpb.LeaseTimeToLiveRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LeaseTimeToLive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LeaseTimeToLive retrieves lease information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.LeaseTimeToLiveResponse LeaseTimeToLive(global::Etcdserverpb.LeaseTimeToLiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LeaseTimeToLive, null, options, request);
      }
      /// <summary>
      /// LeaseTimeToLive retrieves lease information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.LeaseTimeToLiveResponse> LeaseTimeToLiveAsync(global::Etcdserverpb.LeaseTimeToLiveRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LeaseTimeToLiveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LeaseTimeToLive retrieves lease information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.LeaseTimeToLiveResponse> LeaseTimeToLiveAsync(global::Etcdserverpb.LeaseTimeToLiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LeaseTimeToLive, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LeaseClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LeaseClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LeaseBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_LeaseGrant, serviceImpl.LeaseGrant)
          .AddMethod(__Method_LeaseRevoke, serviceImpl.LeaseRevoke)
          .AddMethod(__Method_LeaseKeepAlive, serviceImpl.LeaseKeepAlive)
          .AddMethod(__Method_LeaseTimeToLive, serviceImpl.LeaseTimeToLive).Build();
    }

  }
  public static partial class Cluster
  {
    static readonly string __ServiceName = "etcdserverpb.Cluster";

    static readonly grpc::Marshaller<global::Etcdserverpb.MemberAddRequest> __Marshaller_MemberAddRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.MemberAddRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.MemberAddResponse> __Marshaller_MemberAddResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.MemberAddResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.MemberRemoveRequest> __Marshaller_MemberRemoveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.MemberRemoveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.MemberRemoveResponse> __Marshaller_MemberRemoveResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.MemberRemoveResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.MemberUpdateRequest> __Marshaller_MemberUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.MemberUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.MemberUpdateResponse> __Marshaller_MemberUpdateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.MemberUpdateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.MemberListRequest> __Marshaller_MemberListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.MemberListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.MemberListResponse> __Marshaller_MemberListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.MemberListResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Etcdserverpb.MemberAddRequest, global::Etcdserverpb.MemberAddResponse> __Method_MemberAdd = new grpc::Method<global::Etcdserverpb.MemberAddRequest, global::Etcdserverpb.MemberAddResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MemberAdd",
        __Marshaller_MemberAddRequest,
        __Marshaller_MemberAddResponse);

    static readonly grpc::Method<global::Etcdserverpb.MemberRemoveRequest, global::Etcdserverpb.MemberRemoveResponse> __Method_MemberRemove = new grpc::Method<global::Etcdserverpb.MemberRemoveRequest, global::Etcdserverpb.MemberRemoveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MemberRemove",
        __Marshaller_MemberRemoveRequest,
        __Marshaller_MemberRemoveResponse);

    static readonly grpc::Method<global::Etcdserverpb.MemberUpdateRequest, global::Etcdserverpb.MemberUpdateResponse> __Method_MemberUpdate = new grpc::Method<global::Etcdserverpb.MemberUpdateRequest, global::Etcdserverpb.MemberUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MemberUpdate",
        __Marshaller_MemberUpdateRequest,
        __Marshaller_MemberUpdateResponse);

    static readonly grpc::Method<global::Etcdserverpb.MemberListRequest, global::Etcdserverpb.MemberListResponse> __Method_MemberList = new grpc::Method<global::Etcdserverpb.MemberListRequest, global::Etcdserverpb.MemberListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MemberList",
        __Marshaller_MemberListRequest,
        __Marshaller_MemberListResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of Cluster</summary>
    public abstract partial class ClusterBase
    {
      /// <summary>
      /// MemberAdd adds a member into the cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.MemberAddResponse> MemberAdd(global::Etcdserverpb.MemberAddRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MemberRemove removes an existing member from the cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.MemberRemoveResponse> MemberRemove(global::Etcdserverpb.MemberRemoveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MemberUpdate updates the member configuration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.MemberUpdateResponse> MemberUpdate(global::Etcdserverpb.MemberUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MemberList lists all the members in the cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.MemberListResponse> MemberList(global::Etcdserverpb.MemberListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Cluster</summary>
    public partial class ClusterClient : grpc::ClientBase<ClusterClient>
    {
      /// <summary>Creates a new client for Cluster</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ClusterClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Cluster that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ClusterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ClusterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ClusterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// MemberAdd adds a member into the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.MemberAddResponse MemberAdd(global::Etcdserverpb.MemberAddRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MemberAdd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MemberAdd adds a member into the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.MemberAddResponse MemberAdd(global::Etcdserverpb.MemberAddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MemberAdd, null, options, request);
      }
      /// <summary>
      /// MemberAdd adds a member into the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.MemberAddResponse> MemberAddAsync(global::Etcdserverpb.MemberAddRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MemberAddAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MemberAdd adds a member into the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.MemberAddResponse> MemberAddAsync(global::Etcdserverpb.MemberAddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MemberAdd, null, options, request);
      }
      /// <summary>
      /// MemberRemove removes an existing member from the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.MemberRemoveResponse MemberRemove(global::Etcdserverpb.MemberRemoveRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MemberRemove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MemberRemove removes an existing member from the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.MemberRemoveResponse MemberRemove(global::Etcdserverpb.MemberRemoveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MemberRemove, null, options, request);
      }
      /// <summary>
      /// MemberRemove removes an existing member from the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.MemberRemoveResponse> MemberRemoveAsync(global::Etcdserverpb.MemberRemoveRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MemberRemoveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MemberRemove removes an existing member from the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.MemberRemoveResponse> MemberRemoveAsync(global::Etcdserverpb.MemberRemoveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MemberRemove, null, options, request);
      }
      /// <summary>
      /// MemberUpdate updates the member configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.MemberUpdateResponse MemberUpdate(global::Etcdserverpb.MemberUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MemberUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MemberUpdate updates the member configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.MemberUpdateResponse MemberUpdate(global::Etcdserverpb.MemberUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MemberUpdate, null, options, request);
      }
      /// <summary>
      /// MemberUpdate updates the member configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.MemberUpdateResponse> MemberUpdateAsync(global::Etcdserverpb.MemberUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MemberUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MemberUpdate updates the member configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.MemberUpdateResponse> MemberUpdateAsync(global::Etcdserverpb.MemberUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MemberUpdate, null, options, request);
      }
      /// <summary>
      /// MemberList lists all the members in the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.MemberListResponse MemberList(global::Etcdserverpb.MemberListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MemberList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MemberList lists all the members in the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.MemberListResponse MemberList(global::Etcdserverpb.MemberListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MemberList, null, options, request);
      }
      /// <summary>
      /// MemberList lists all the members in the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.MemberListResponse> MemberListAsync(global::Etcdserverpb.MemberListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MemberListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MemberList lists all the members in the cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.MemberListResponse> MemberListAsync(global::Etcdserverpb.MemberListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MemberList, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ClusterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ClusterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ClusterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_MemberAdd, serviceImpl.MemberAdd)
          .AddMethod(__Method_MemberRemove, serviceImpl.MemberRemove)
          .AddMethod(__Method_MemberUpdate, serviceImpl.MemberUpdate)
          .AddMethod(__Method_MemberList, serviceImpl.MemberList).Build();
    }

  }
  public static partial class Maintenance
  {
    static readonly string __ServiceName = "etcdserverpb.Maintenance";

    static readonly grpc::Marshaller<global::Etcdserverpb.AlarmRequest> __Marshaller_AlarmRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AlarmRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AlarmResponse> __Marshaller_AlarmResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AlarmResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.StatusRequest> __Marshaller_StatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.StatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.StatusResponse> __Marshaller_StatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.StatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.DefragmentRequest> __Marshaller_DefragmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.DefragmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.DefragmentResponse> __Marshaller_DefragmentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.DefragmentResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.HashRequest> __Marshaller_HashRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.HashRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.HashResponse> __Marshaller_HashResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.HashResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.SnapshotRequest> __Marshaller_SnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.SnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.SnapshotResponse> __Marshaller_SnapshotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.SnapshotResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Etcdserverpb.AlarmRequest, global::Etcdserverpb.AlarmResponse> __Method_Alarm = new grpc::Method<global::Etcdserverpb.AlarmRequest, global::Etcdserverpb.AlarmResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Alarm",
        __Marshaller_AlarmRequest,
        __Marshaller_AlarmResponse);

    static readonly grpc::Method<global::Etcdserverpb.StatusRequest, global::Etcdserverpb.StatusResponse> __Method_Status = new grpc::Method<global::Etcdserverpb.StatusRequest, global::Etcdserverpb.StatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Status",
        __Marshaller_StatusRequest,
        __Marshaller_StatusResponse);

    static readonly grpc::Method<global::Etcdserverpb.DefragmentRequest, global::Etcdserverpb.DefragmentResponse> __Method_Defragment = new grpc::Method<global::Etcdserverpb.DefragmentRequest, global::Etcdserverpb.DefragmentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Defragment",
        __Marshaller_DefragmentRequest,
        __Marshaller_DefragmentResponse);

    static readonly grpc::Method<global::Etcdserverpb.HashRequest, global::Etcdserverpb.HashResponse> __Method_Hash = new grpc::Method<global::Etcdserverpb.HashRequest, global::Etcdserverpb.HashResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Hash",
        __Marshaller_HashRequest,
        __Marshaller_HashResponse);

    static readonly grpc::Method<global::Etcdserverpb.SnapshotRequest, global::Etcdserverpb.SnapshotResponse> __Method_Snapshot = new grpc::Method<global::Etcdserverpb.SnapshotRequest, global::Etcdserverpb.SnapshotResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Snapshot",
        __Marshaller_SnapshotRequest,
        __Marshaller_SnapshotResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.Services[4]; }
    }

    /// <summary>Base class for server-side implementations of Maintenance</summary>
    public abstract partial class MaintenanceBase
    {
      /// <summary>
      /// Alarm activates, deactivates, and queries alarms regarding cluster health.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AlarmResponse> Alarm(global::Etcdserverpb.AlarmRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Status gets the status of the member.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.StatusResponse> Status(global::Etcdserverpb.StatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Defragment defragments a member's backend database to recover storage space.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.DefragmentResponse> Defragment(global::Etcdserverpb.DefragmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Hash returns the hash of the local KV state for consistency checking purpose.
      /// This is designed for testing; do not use this in production when there
      /// are ongoing transactions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.HashResponse> Hash(global::Etcdserverpb.HashRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Snapshot sends a snapshot of the entire backend from a member over a stream to a client.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Snapshot(global::Etcdserverpb.SnapshotRequest request, grpc::IServerStreamWriter<global::Etcdserverpb.SnapshotResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Maintenance</summary>
    public partial class MaintenanceClient : grpc::ClientBase<MaintenanceClient>
    {
      /// <summary>Creates a new client for Maintenance</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MaintenanceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Maintenance that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MaintenanceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MaintenanceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MaintenanceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Alarm activates, deactivates, and queries alarms regarding cluster health.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AlarmResponse Alarm(global::Etcdserverpb.AlarmRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Alarm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Alarm activates, deactivates, and queries alarms regarding cluster health.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AlarmResponse Alarm(global::Etcdserverpb.AlarmRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Alarm, null, options, request);
      }
      /// <summary>
      /// Alarm activates, deactivates, and queries alarms regarding cluster health.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AlarmResponse> AlarmAsync(global::Etcdserverpb.AlarmRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AlarmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Alarm activates, deactivates, and queries alarms regarding cluster health.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AlarmResponse> AlarmAsync(global::Etcdserverpb.AlarmRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Alarm, null, options, request);
      }
      /// <summary>
      /// Status gets the status of the member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.StatusResponse Status(global::Etcdserverpb.StatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Status(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Status gets the status of the member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.StatusResponse Status(global::Etcdserverpb.StatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Status, null, options, request);
      }
      /// <summary>
      /// Status gets the status of the member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.StatusResponse> StatusAsync(global::Etcdserverpb.StatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Status gets the status of the member.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.StatusResponse> StatusAsync(global::Etcdserverpb.StatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Status, null, options, request);
      }
      /// <summary>
      /// Defragment defragments a member's backend database to recover storage space.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.DefragmentResponse Defragment(global::Etcdserverpb.DefragmentRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Defragment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Defragment defragments a member's backend database to recover storage space.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.DefragmentResponse Defragment(global::Etcdserverpb.DefragmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Defragment, null, options, request);
      }
      /// <summary>
      /// Defragment defragments a member's backend database to recover storage space.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.DefragmentResponse> DefragmentAsync(global::Etcdserverpb.DefragmentRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DefragmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Defragment defragments a member's backend database to recover storage space.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.DefragmentResponse> DefragmentAsync(global::Etcdserverpb.DefragmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Defragment, null, options, request);
      }
      /// <summary>
      /// Hash returns the hash of the local KV state for consistency checking purpose.
      /// This is designed for testing; do not use this in production when there
      /// are ongoing transactions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.HashResponse Hash(global::Etcdserverpb.HashRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Hash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Hash returns the hash of the local KV state for consistency checking purpose.
      /// This is designed for testing; do not use this in production when there
      /// are ongoing transactions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.HashResponse Hash(global::Etcdserverpb.HashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Hash, null, options, request);
      }
      /// <summary>
      /// Hash returns the hash of the local KV state for consistency checking purpose.
      /// This is designed for testing; do not use this in production when there
      /// are ongoing transactions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.HashResponse> HashAsync(global::Etcdserverpb.HashRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return HashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Hash returns the hash of the local KV state for consistency checking purpose.
      /// This is designed for testing; do not use this in production when there
      /// are ongoing transactions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.HashResponse> HashAsync(global::Etcdserverpb.HashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Hash, null, options, request);
      }
      /// <summary>
      /// Snapshot sends a snapshot of the entire backend from a member over a stream to a client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Etcdserverpb.SnapshotResponse> Snapshot(global::Etcdserverpb.SnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Snapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Snapshot sends a snapshot of the entire backend from a member over a stream to a client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Etcdserverpb.SnapshotResponse> Snapshot(global::Etcdserverpb.SnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Snapshot, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MaintenanceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MaintenanceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MaintenanceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Alarm, serviceImpl.Alarm)
          .AddMethod(__Method_Status, serviceImpl.Status)
          .AddMethod(__Method_Defragment, serviceImpl.Defragment)
          .AddMethod(__Method_Hash, serviceImpl.Hash)
          .AddMethod(__Method_Snapshot, serviceImpl.Snapshot).Build();
    }

  }
  public static partial class Auth
  {
    static readonly string __ServiceName = "etcdserverpb.Auth";

    static readonly grpc::Marshaller<global::Etcdserverpb.AuthEnableRequest> __Marshaller_AuthEnableRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthEnableRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthEnableResponse> __Marshaller_AuthEnableResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthEnableResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthDisableRequest> __Marshaller_AuthDisableRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthDisableRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthDisableResponse> __Marshaller_AuthDisableResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthDisableResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthenticateRequest> __Marshaller_AuthenticateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthenticateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthenticateResponse> __Marshaller_AuthenticateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthenticateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserAddRequest> __Marshaller_AuthUserAddRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserAddRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserAddResponse> __Marshaller_AuthUserAddResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserAddResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserGetRequest> __Marshaller_AuthUserGetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserGetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserGetResponse> __Marshaller_AuthUserGetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserGetResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserListRequest> __Marshaller_AuthUserListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserListResponse> __Marshaller_AuthUserListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserDeleteRequest> __Marshaller_AuthUserDeleteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserDeleteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserDeleteResponse> __Marshaller_AuthUserDeleteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserDeleteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserChangePasswordRequest> __Marshaller_AuthUserChangePasswordRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserChangePasswordRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserChangePasswordResponse> __Marshaller_AuthUserChangePasswordResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserChangePasswordResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserGrantRoleRequest> __Marshaller_AuthUserGrantRoleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserGrantRoleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserGrantRoleResponse> __Marshaller_AuthUserGrantRoleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserGrantRoleResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserRevokeRoleRequest> __Marshaller_AuthUserRevokeRoleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserRevokeRoleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthUserRevokeRoleResponse> __Marshaller_AuthUserRevokeRoleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthUserRevokeRoleResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleAddRequest> __Marshaller_AuthRoleAddRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleAddRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleAddResponse> __Marshaller_AuthRoleAddResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleAddResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleGetRequest> __Marshaller_AuthRoleGetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleGetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleGetResponse> __Marshaller_AuthRoleGetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleGetResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleListRequest> __Marshaller_AuthRoleListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleListResponse> __Marshaller_AuthRoleListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleDeleteRequest> __Marshaller_AuthRoleDeleteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleDeleteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleDeleteResponse> __Marshaller_AuthRoleDeleteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleDeleteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleGrantPermissionRequest> __Marshaller_AuthRoleGrantPermissionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleGrantPermissionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleGrantPermissionResponse> __Marshaller_AuthRoleGrantPermissionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleGrantPermissionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleRevokePermissionRequest> __Marshaller_AuthRoleRevokePermissionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleRevokePermissionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Etcdserverpb.AuthRoleRevokePermissionResponse> __Marshaller_AuthRoleRevokePermissionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Etcdserverpb.AuthRoleRevokePermissionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Etcdserverpb.AuthEnableRequest, global::Etcdserverpb.AuthEnableResponse> __Method_AuthEnable = new grpc::Method<global::Etcdserverpb.AuthEnableRequest, global::Etcdserverpb.AuthEnableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AuthEnable",
        __Marshaller_AuthEnableRequest,
        __Marshaller_AuthEnableResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthDisableRequest, global::Etcdserverpb.AuthDisableResponse> __Method_AuthDisable = new grpc::Method<global::Etcdserverpb.AuthDisableRequest, global::Etcdserverpb.AuthDisableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AuthDisable",
        __Marshaller_AuthDisableRequest,
        __Marshaller_AuthDisableResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthenticateRequest, global::Etcdserverpb.AuthenticateResponse> __Method_Authenticate = new grpc::Method<global::Etcdserverpb.AuthenticateRequest, global::Etcdserverpb.AuthenticateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Authenticate",
        __Marshaller_AuthenticateRequest,
        __Marshaller_AuthenticateResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthUserAddRequest, global::Etcdserverpb.AuthUserAddResponse> __Method_UserAdd = new grpc::Method<global::Etcdserverpb.AuthUserAddRequest, global::Etcdserverpb.AuthUserAddResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserAdd",
        __Marshaller_AuthUserAddRequest,
        __Marshaller_AuthUserAddResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthUserGetRequest, global::Etcdserverpb.AuthUserGetResponse> __Method_UserGet = new grpc::Method<global::Etcdserverpb.AuthUserGetRequest, global::Etcdserverpb.AuthUserGetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserGet",
        __Marshaller_AuthUserGetRequest,
        __Marshaller_AuthUserGetResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthUserListRequest, global::Etcdserverpb.AuthUserListResponse> __Method_UserList = new grpc::Method<global::Etcdserverpb.AuthUserListRequest, global::Etcdserverpb.AuthUserListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserList",
        __Marshaller_AuthUserListRequest,
        __Marshaller_AuthUserListResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthUserDeleteRequest, global::Etcdserverpb.AuthUserDeleteResponse> __Method_UserDelete = new grpc::Method<global::Etcdserverpb.AuthUserDeleteRequest, global::Etcdserverpb.AuthUserDeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserDelete",
        __Marshaller_AuthUserDeleteRequest,
        __Marshaller_AuthUserDeleteResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthUserChangePasswordRequest, global::Etcdserverpb.AuthUserChangePasswordResponse> __Method_UserChangePassword = new grpc::Method<global::Etcdserverpb.AuthUserChangePasswordRequest, global::Etcdserverpb.AuthUserChangePasswordResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserChangePassword",
        __Marshaller_AuthUserChangePasswordRequest,
        __Marshaller_AuthUserChangePasswordResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthUserGrantRoleRequest, global::Etcdserverpb.AuthUserGrantRoleResponse> __Method_UserGrantRole = new grpc::Method<global::Etcdserverpb.AuthUserGrantRoleRequest, global::Etcdserverpb.AuthUserGrantRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserGrantRole",
        __Marshaller_AuthUserGrantRoleRequest,
        __Marshaller_AuthUserGrantRoleResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthUserRevokeRoleRequest, global::Etcdserverpb.AuthUserRevokeRoleResponse> __Method_UserRevokeRole = new grpc::Method<global::Etcdserverpb.AuthUserRevokeRoleRequest, global::Etcdserverpb.AuthUserRevokeRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserRevokeRole",
        __Marshaller_AuthUserRevokeRoleRequest,
        __Marshaller_AuthUserRevokeRoleResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthRoleAddRequest, global::Etcdserverpb.AuthRoleAddResponse> __Method_RoleAdd = new grpc::Method<global::Etcdserverpb.AuthRoleAddRequest, global::Etcdserverpb.AuthRoleAddResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RoleAdd",
        __Marshaller_AuthRoleAddRequest,
        __Marshaller_AuthRoleAddResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthRoleGetRequest, global::Etcdserverpb.AuthRoleGetResponse> __Method_RoleGet = new grpc::Method<global::Etcdserverpb.AuthRoleGetRequest, global::Etcdserverpb.AuthRoleGetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RoleGet",
        __Marshaller_AuthRoleGetRequest,
        __Marshaller_AuthRoleGetResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthRoleListRequest, global::Etcdserverpb.AuthRoleListResponse> __Method_RoleList = new grpc::Method<global::Etcdserverpb.AuthRoleListRequest, global::Etcdserverpb.AuthRoleListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RoleList",
        __Marshaller_AuthRoleListRequest,
        __Marshaller_AuthRoleListResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthRoleDeleteRequest, global::Etcdserverpb.AuthRoleDeleteResponse> __Method_RoleDelete = new grpc::Method<global::Etcdserverpb.AuthRoleDeleteRequest, global::Etcdserverpb.AuthRoleDeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RoleDelete",
        __Marshaller_AuthRoleDeleteRequest,
        __Marshaller_AuthRoleDeleteResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthRoleGrantPermissionRequest, global::Etcdserverpb.AuthRoleGrantPermissionResponse> __Method_RoleGrantPermission = new grpc::Method<global::Etcdserverpb.AuthRoleGrantPermissionRequest, global::Etcdserverpb.AuthRoleGrantPermissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RoleGrantPermission",
        __Marshaller_AuthRoleGrantPermissionRequest,
        __Marshaller_AuthRoleGrantPermissionResponse);

    static readonly grpc::Method<global::Etcdserverpb.AuthRoleRevokePermissionRequest, global::Etcdserverpb.AuthRoleRevokePermissionResponse> __Method_RoleRevokePermission = new grpc::Method<global::Etcdserverpb.AuthRoleRevokePermissionRequest, global::Etcdserverpb.AuthRoleRevokePermissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RoleRevokePermission",
        __Marshaller_AuthRoleRevokePermissionRequest,
        __Marshaller_AuthRoleRevokePermissionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.Services[5]; }
    }

    /// <summary>Base class for server-side implementations of Auth</summary>
    public abstract partial class AuthBase
    {
      /// <summary>
      /// AuthEnable enables authentication.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthEnableResponse> AuthEnable(global::Etcdserverpb.AuthEnableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// AuthDisable disables authentication.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthDisableResponse> AuthDisable(global::Etcdserverpb.AuthDisableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Authenticate processes an authenticate request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthenticateResponse> Authenticate(global::Etcdserverpb.AuthenticateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UserAdd adds a new user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthUserAddResponse> UserAdd(global::Etcdserverpb.AuthUserAddRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UserGet gets detailed user information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthUserGetResponse> UserGet(global::Etcdserverpb.AuthUserGetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UserList gets a list of all users.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthUserListResponse> UserList(global::Etcdserverpb.AuthUserListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UserDelete deletes a specified user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthUserDeleteResponse> UserDelete(global::Etcdserverpb.AuthUserDeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UserChangePassword changes the password of a specified user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthUserChangePasswordResponse> UserChangePassword(global::Etcdserverpb.AuthUserChangePasswordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UserGrant grants a role to a specified user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthUserGrantRoleResponse> UserGrantRole(global::Etcdserverpb.AuthUserGrantRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UserRevokeRole revokes a role of specified user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthUserRevokeRoleResponse> UserRevokeRole(global::Etcdserverpb.AuthUserRevokeRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RoleAdd adds a new role.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthRoleAddResponse> RoleAdd(global::Etcdserverpb.AuthRoleAddRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RoleGet gets detailed role information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthRoleGetResponse> RoleGet(global::Etcdserverpb.AuthRoleGetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RoleList gets lists of all roles.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthRoleListResponse> RoleList(global::Etcdserverpb.AuthRoleListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RoleDelete deletes a specified role.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthRoleDeleteResponse> RoleDelete(global::Etcdserverpb.AuthRoleDeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RoleGrantPermission grants a permission of a specified key or range to a specified role.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthRoleGrantPermissionResponse> RoleGrantPermission(global::Etcdserverpb.AuthRoleGrantPermissionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RoleRevokePermission revokes a key or range permission of a specified role.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Etcdserverpb.AuthRoleRevokePermissionResponse> RoleRevokePermission(global::Etcdserverpb.AuthRoleRevokePermissionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Auth</summary>
    public partial class AuthClient : grpc::ClientBase<AuthClient>
    {
      /// <summary>Creates a new client for Auth</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AuthClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Auth that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AuthClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AuthClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AuthClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// AuthEnable enables authentication.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthEnableResponse AuthEnable(global::Etcdserverpb.AuthEnableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AuthEnable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AuthEnable enables authentication.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthEnableResponse AuthEnable(global::Etcdserverpb.AuthEnableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AuthEnable, null, options, request);
      }
      /// <summary>
      /// AuthEnable enables authentication.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthEnableResponse> AuthEnableAsync(global::Etcdserverpb.AuthEnableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AuthEnableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AuthEnable enables authentication.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthEnableResponse> AuthEnableAsync(global::Etcdserverpb.AuthEnableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AuthEnable, null, options, request);
      }
      /// <summary>
      /// AuthDisable disables authentication.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthDisableResponse AuthDisable(global::Etcdserverpb.AuthDisableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AuthDisable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AuthDisable disables authentication.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthDisableResponse AuthDisable(global::Etcdserverpb.AuthDisableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AuthDisable, null, options, request);
      }
      /// <summary>
      /// AuthDisable disables authentication.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthDisableResponse> AuthDisableAsync(global::Etcdserverpb.AuthDisableRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AuthDisableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AuthDisable disables authentication.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthDisableResponse> AuthDisableAsync(global::Etcdserverpb.AuthDisableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AuthDisable, null, options, request);
      }
      /// <summary>
      /// Authenticate processes an authenticate request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthenticateResponse Authenticate(global::Etcdserverpb.AuthenticateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Authenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Authenticate processes an authenticate request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthenticateResponse Authenticate(global::Etcdserverpb.AuthenticateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Authenticate, null, options, request);
      }
      /// <summary>
      /// Authenticate processes an authenticate request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthenticateResponse> AuthenticateAsync(global::Etcdserverpb.AuthenticateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Authenticate processes an authenticate request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthenticateResponse> AuthenticateAsync(global::Etcdserverpb.AuthenticateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Authenticate, null, options, request);
      }
      /// <summary>
      /// UserAdd adds a new user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserAddResponse UserAdd(global::Etcdserverpb.AuthUserAddRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserAdd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserAdd adds a new user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserAddResponse UserAdd(global::Etcdserverpb.AuthUserAddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserAdd, null, options, request);
      }
      /// <summary>
      /// UserAdd adds a new user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserAddResponse> UserAddAsync(global::Etcdserverpb.AuthUserAddRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserAddAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserAdd adds a new user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserAddResponse> UserAddAsync(global::Etcdserverpb.AuthUserAddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserAdd, null, options, request);
      }
      /// <summary>
      /// UserGet gets detailed user information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserGetResponse UserGet(global::Etcdserverpb.AuthUserGetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserGet gets detailed user information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserGetResponse UserGet(global::Etcdserverpb.AuthUserGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserGet, null, options, request);
      }
      /// <summary>
      /// UserGet gets detailed user information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserGetResponse> UserGetAsync(global::Etcdserverpb.AuthUserGetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserGet gets detailed user information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserGetResponse> UserGetAsync(global::Etcdserverpb.AuthUserGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserGet, null, options, request);
      }
      /// <summary>
      /// UserList gets a list of all users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserListResponse UserList(global::Etcdserverpb.AuthUserListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserList gets a list of all users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserListResponse UserList(global::Etcdserverpb.AuthUserListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserList, null, options, request);
      }
      /// <summary>
      /// UserList gets a list of all users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserListResponse> UserListAsync(global::Etcdserverpb.AuthUserListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserList gets a list of all users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserListResponse> UserListAsync(global::Etcdserverpb.AuthUserListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserList, null, options, request);
      }
      /// <summary>
      /// UserDelete deletes a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserDeleteResponse UserDelete(global::Etcdserverpb.AuthUserDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserDelete deletes a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserDeleteResponse UserDelete(global::Etcdserverpb.AuthUserDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserDelete, null, options, request);
      }
      /// <summary>
      /// UserDelete deletes a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserDeleteResponse> UserDeleteAsync(global::Etcdserverpb.AuthUserDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserDelete deletes a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserDeleteResponse> UserDeleteAsync(global::Etcdserverpb.AuthUserDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserDelete, null, options, request);
      }
      /// <summary>
      /// UserChangePassword changes the password of a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserChangePasswordResponse UserChangePassword(global::Etcdserverpb.AuthUserChangePasswordRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserChangePassword(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserChangePassword changes the password of a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserChangePasswordResponse UserChangePassword(global::Etcdserverpb.AuthUserChangePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserChangePassword, null, options, request);
      }
      /// <summary>
      /// UserChangePassword changes the password of a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserChangePasswordResponse> UserChangePasswordAsync(global::Etcdserverpb.AuthUserChangePasswordRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserChangePasswordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserChangePassword changes the password of a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserChangePasswordResponse> UserChangePasswordAsync(global::Etcdserverpb.AuthUserChangePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserChangePassword, null, options, request);
      }
      /// <summary>
      /// UserGrant grants a role to a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserGrantRoleResponse UserGrantRole(global::Etcdserverpb.AuthUserGrantRoleRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserGrantRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserGrant grants a role to a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserGrantRoleResponse UserGrantRole(global::Etcdserverpb.AuthUserGrantRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserGrantRole, null, options, request);
      }
      /// <summary>
      /// UserGrant grants a role to a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserGrantRoleResponse> UserGrantRoleAsync(global::Etcdserverpb.AuthUserGrantRoleRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserGrantRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserGrant grants a role to a specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserGrantRoleResponse> UserGrantRoleAsync(global::Etcdserverpb.AuthUserGrantRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserGrantRole, null, options, request);
      }
      /// <summary>
      /// UserRevokeRole revokes a role of specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserRevokeRoleResponse UserRevokeRole(global::Etcdserverpb.AuthUserRevokeRoleRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserRevokeRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserRevokeRole revokes a role of specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthUserRevokeRoleResponse UserRevokeRole(global::Etcdserverpb.AuthUserRevokeRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserRevokeRole, null, options, request);
      }
      /// <summary>
      /// UserRevokeRole revokes a role of specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserRevokeRoleResponse> UserRevokeRoleAsync(global::Etcdserverpb.AuthUserRevokeRoleRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserRevokeRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserRevokeRole revokes a role of specified user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthUserRevokeRoleResponse> UserRevokeRoleAsync(global::Etcdserverpb.AuthUserRevokeRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserRevokeRole, null, options, request);
      }
      /// <summary>
      /// RoleAdd adds a new role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleAddResponse RoleAdd(global::Etcdserverpb.AuthRoleAddRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleAdd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleAdd adds a new role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleAddResponse RoleAdd(global::Etcdserverpb.AuthRoleAddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RoleAdd, null, options, request);
      }
      /// <summary>
      /// RoleAdd adds a new role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleAddResponse> RoleAddAsync(global::Etcdserverpb.AuthRoleAddRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleAddAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleAdd adds a new role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleAddResponse> RoleAddAsync(global::Etcdserverpb.AuthRoleAddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RoleAdd, null, options, request);
      }
      /// <summary>
      /// RoleGet gets detailed role information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleGetResponse RoleGet(global::Etcdserverpb.AuthRoleGetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleGet gets detailed role information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleGetResponse RoleGet(global::Etcdserverpb.AuthRoleGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RoleGet, null, options, request);
      }
      /// <summary>
      /// RoleGet gets detailed role information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleGetResponse> RoleGetAsync(global::Etcdserverpb.AuthRoleGetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleGet gets detailed role information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleGetResponse> RoleGetAsync(global::Etcdserverpb.AuthRoleGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RoleGet, null, options, request);
      }
      /// <summary>
      /// RoleList gets lists of all roles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleListResponse RoleList(global::Etcdserverpb.AuthRoleListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleList gets lists of all roles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleListResponse RoleList(global::Etcdserverpb.AuthRoleListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RoleList, null, options, request);
      }
      /// <summary>
      /// RoleList gets lists of all roles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleListResponse> RoleListAsync(global::Etcdserverpb.AuthRoleListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleList gets lists of all roles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleListResponse> RoleListAsync(global::Etcdserverpb.AuthRoleListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RoleList, null, options, request);
      }
      /// <summary>
      /// RoleDelete deletes a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleDeleteResponse RoleDelete(global::Etcdserverpb.AuthRoleDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleDelete deletes a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleDeleteResponse RoleDelete(global::Etcdserverpb.AuthRoleDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RoleDelete, null, options, request);
      }
      /// <summary>
      /// RoleDelete deletes a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleDeleteResponse> RoleDeleteAsync(global::Etcdserverpb.AuthRoleDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleDelete deletes a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleDeleteResponse> RoleDeleteAsync(global::Etcdserverpb.AuthRoleDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RoleDelete, null, options, request);
      }
      /// <summary>
      /// RoleGrantPermission grants a permission of a specified key or range to a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleGrantPermissionResponse RoleGrantPermission(global::Etcdserverpb.AuthRoleGrantPermissionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleGrantPermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleGrantPermission grants a permission of a specified key or range to a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleGrantPermissionResponse RoleGrantPermission(global::Etcdserverpb.AuthRoleGrantPermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RoleGrantPermission, null, options, request);
      }
      /// <summary>
      /// RoleGrantPermission grants a permission of a specified key or range to a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleGrantPermissionResponse> RoleGrantPermissionAsync(global::Etcdserverpb.AuthRoleGrantPermissionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleGrantPermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleGrantPermission grants a permission of a specified key or range to a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleGrantPermissionResponse> RoleGrantPermissionAsync(global::Etcdserverpb.AuthRoleGrantPermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RoleGrantPermission, null, options, request);
      }
      /// <summary>
      /// RoleRevokePermission revokes a key or range permission of a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleRevokePermissionResponse RoleRevokePermission(global::Etcdserverpb.AuthRoleRevokePermissionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleRevokePermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleRevokePermission revokes a key or range permission of a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Etcdserverpb.AuthRoleRevokePermissionResponse RoleRevokePermission(global::Etcdserverpb.AuthRoleRevokePermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RoleRevokePermission, null, options, request);
      }
      /// <summary>
      /// RoleRevokePermission revokes a key or range permission of a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleRevokePermissionResponse> RoleRevokePermissionAsync(global::Etcdserverpb.AuthRoleRevokePermissionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RoleRevokePermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RoleRevokePermission revokes a key or range permission of a specified role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Etcdserverpb.AuthRoleRevokePermissionResponse> RoleRevokePermissionAsync(global::Etcdserverpb.AuthRoleRevokePermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RoleRevokePermission, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AuthClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AuthClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AuthBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AuthEnable, serviceImpl.AuthEnable)
          .AddMethod(__Method_AuthDisable, serviceImpl.AuthDisable)
          .AddMethod(__Method_Authenticate, serviceImpl.Authenticate)
          .AddMethod(__Method_UserAdd, serviceImpl.UserAdd)
          .AddMethod(__Method_UserGet, serviceImpl.UserGet)
          .AddMethod(__Method_UserList, serviceImpl.UserList)
          .AddMethod(__Method_UserDelete, serviceImpl.UserDelete)
          .AddMethod(__Method_UserChangePassword, serviceImpl.UserChangePassword)
          .AddMethod(__Method_UserGrantRole, serviceImpl.UserGrantRole)
          .AddMethod(__Method_UserRevokeRole, serviceImpl.UserRevokeRole)
          .AddMethod(__Method_RoleAdd, serviceImpl.RoleAdd)
          .AddMethod(__Method_RoleGet, serviceImpl.RoleGet)
          .AddMethod(__Method_RoleList, serviceImpl.RoleList)
          .AddMethod(__Method_RoleDelete, serviceImpl.RoleDelete)
          .AddMethod(__Method_RoleGrantPermission, serviceImpl.RoleGrantPermission)
          .AddMethod(__Method_RoleRevokePermission, serviceImpl.RoleRevokePermission).Build();
    }

  }
}
#endregion
